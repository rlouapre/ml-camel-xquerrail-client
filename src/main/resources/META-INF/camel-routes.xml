<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

	<!-- A simple bean that sets the body of the input message to a block of 
		XML with the current time in it -->
	<bean id="currentTimeXmlGenerator"
		class="com.rjrudin.marklogic.camel.sample.CurrentTimeXmlGenerator" />

	<!-- Custom class for processing CSV text -->
	<bean id="csvProcessor" class="com.rjrudin.marklogic.camel.sample.CsvProcessor" />

	<!-- Custom class for Xcc AdHocQuery -->
	<bean id="xccAdHocQueryProcessor"
		class="com.rjrudin.marklogic.camel.sample.XccAdHocQueryProcessor" />

	<!-- Custom class for Xcc Module Invoke -->
	<bean id="xccModuleInvokeProcessor"
		class="com.rjrudin.marklogic.camel.sample.XccModuleInvokeProcessor" />

	<bean id="xquerrailInitializeProcessor"
		class="com.rjrudin.marklogic.camel.sample.XquerrailInitializeProcessor" />

	<!-- Custom class for defining parameters for searching search.worldbank.org -->
	<bean id="wbSearchInitializer" class="com.rjrudin.marklogic.camel.sample.WbSearchInitializer">
		<property name="rows" value="50" />
		<property name="page" value="1" />
	</bean>

	<bean id="xccTemplate" class="com.rjrudin.marklogic.xcc.XccTemplate">
		<constructor-arg
			value="xcc://#{systemProperties['mlUsername']}:#{systemProperties['mlPassword']}@#{systemProperties['mlHost']}:#{systemProperties['mlXdbcPort']}" />
	</bean>

	<camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">

		<!-- Reads files from the given directory and then ingest them using mlcp -->
		<route autoStartup="false">
			<from uri="file://inbox/mlcp" />
			<to
				uri="mlcp:{{mlHost}}:{{mlXdbcPort}}?username={{mlUsername}}&amp;password={{mlPassword}}&amp;output_collections=mlcp-test&amp;xml_repair_level=full" />
		</route>

		<!-- Reads files from the given directory, splits them, and then in parallel 
			runs them through a custom Java class for processing, generates XML via Velocity, 
			and then ingests the XML using XCC -->
		<route autoStartup="false">
			<from uri="file://inbox/csv" />
			<split streaming="true" parallelProcessing="true">
				<tokenize token="\n" group="1" />
				<unmarshal>
					<csv delimiter="," />
				</unmarshal>
				<to uri="bean:csvProcessor" />
				<to uri="velocity:velocity/to-person.vm?contentCache=false" />
				<to
					uri="ml-xcc://{{mlUsername}}:{{mlPassword}}@{{mlHost}}:{{mlXdbcPort}}?format=xml&amp;collections=person,camel-test&amp;permissions=rest-reader,read,rest-writer,update" />
			</split>
		</route>

		<!-- Route for querying against search.worldbank.org a certain number of 
			times (as defined by the repeatCount parameter) and then parsing the response 
			and ingesting each doc element as a separate document into MarkLogic via 
			XCC. You can customize the wbSearchInitializer bean above to configure how 
			many records are pulled at once and what the starting page is. Note - don't 
			set streaming=true on the split component, that prevents the xpath expression 
			from working properly, as it needs to run against the entire XML payload 
			in memory. -->
		<route autoStartup="false">
			<from
				uri="timer:searchTimer?fixedRate=true&amp;period=2000&amp;repeatCount=1000" />
			<to uri="bean:wbSearchInitializer?method=setHeadersForSearch" />
			<setHeader headerName="CamelHttpQuery">
				<simple>format=xml&amp;srt=docdt&amp;order=desc&amp;rows=${headers.WbSearchRows}&amp;os=${headers.WbSearchStart}
				</simple>
			</setHeader>
			<log message="Query params: ${header.CamelHttpQuery}" />
			<to uri="http4://search.worldbank.org/api/v2/wds" />
			<split parallelProcessing="true">
				<xpath>/documents/doc</xpath>
				<setHeader headerName="docId">
					<xpath>/doc/@id</xpath>
				</setHeader>
				<setHeader headerName="MlXccUri">
					<simple>/world-bank/meta/${header.docId}.xml</simple>
				</setHeader>
				<convertBodyTo type="java.lang.String" />
				<to
					uri="ml-xcc://{{mlUsername}}:{{mlPassword}}@{{mlHost}}:{{mlXdbcPort}}?format=xml&amp;collections=image-bank-meta&amp;permissions=rest-reader,read,rest-writer,update" />
			</split>
		</route>

		<route id="ml-xcc">
			<from uri="file://inbox/xcc" />
			<log message="Start" />
			<to uri="metrics:timer:ml-xcc.counter?action=start" />
			<split streaming="true" parallelProcessing="true">
				<tokenize token="\n" />
				<setHeader headerName="docId">
					<simple>${id}</simple>
				</setHeader>
				<setHeader headerName="MlXccUri">
					<simple>/trades/${header.docId}.xml</simple>
				</setHeader>
				<convertBodyTo type="java.lang.String" />
				<to uri="metrics:timer:ml-xcc.insert.counter?action=start" />
				<to
					uri="ml-xcc://{{mlUsername}}:{{mlPassword}}@{{mlHost}}:{{mlXdbcPort}}?format=xml&amp;collections=trades&amp;permissions=rest-reader,read,rest-writer,update" />
				<to uri="metrics:timer:ml-xcc.insert.counter?action=stop" />
			</split>
			<to uri="metrics:timer:ml-xcc.counter?action=stop" />
			<log message="Done" />
		</route>

		<route id="ml-rest">
			<from uri="file://inbox/rest" />
			<log message="Start" />
			<to uri="metrics:timer:ml-rest.counter?action=start" />
			<split streaming="true" parallelProcessing="true">
				<tokenize token="\n" />
				<setHeader headerName="docId">
					<simple>${id}</simple>
				</setHeader>
				<setHeader headerName="MlXccUri">
					<simple>/trades/${header.docId}.xml</simple>
				</setHeader>
				<setHeader headerName="CamelHttpMethod">
					<constant>PUT</constant>
				</setHeader>
				<setHeader headerName="Exchange.HTTP_QUERY">
					<simple>format=xml&amp;uri=/trades/${header.docId}.xml&amp;database=camel-sandbox-content
					</simple>
				</setHeader>

				<convertBodyTo type="java.lang.String" />
				<to uri="metrics:timer:ml-rest.insert.counter?action=start" />
				<to
					uri="http4://{{mlHost}}:8000/v1/documents?authUsername={{mlUsername}}&amp;authPassword={{mlPassword}}" />
				<to uri="metrics:timer:ml-rest.insert.counter?action=stop" />
			</split>
			<to uri="metrics:timer:ml-rest.counter?action=stop" />
			<log message="Done" />
		</route>

		<route id="ml-xcc-adhoc-query">
			<from uri="file://inbox/xcc-adhoc-query" />
			<log message="Start" />
			<to uri="metrics:timer:ml-xcc-adhoc-query.counter?action=start" />
			<split streaming="true" parallelProcessing="true">
				<tokenize token="\n" />
				<setHeader headerName="docId">
					<simple>${id}</simple>
				</setHeader>
				<setHeader headerName="MlXccUri">
					<simple>/trades/${header.docId}.xml</simple>
				</setHeader>
				<setHeader headerName="XccUri">
					<simple>xcc://{{mlUsername}}:{{mlPassword}}@{{mlHost}}:{{mlXdbcPort}}
					</simple>
				</setHeader>
				<setHeader headerName="MlContentDatabase">
					<simple>{{mlContentDatabase}}</simple>
				</setHeader>
				<convertBodyTo type="java.lang.String" />
				<to uri="metrics:timer:ml-xcc-adhoc-query.insert.counter?action=start" />
				<to uri="bean:xccAdHocQueryProcessor" />
				<to uri="metrics:timer:ml-xcc-adhoc-query.insert.counter?action=stop" />
				<!-- <log message="Uri: ${header.MlXccUri} - Body: ${body}" /> -->
			</split>
			<to uri="metrics:timer:ml-xcc-adhoc-query.counter?action=stop" />
			<log message="Done" />
		</route>

		<route id="ml-xquerrail">
			<from uri="file://inbox/xquerrail" />
			<log message="Start" />
			<to uri="metrics:timer:xquerrail.counter?action=start" />
			<split streaming="true" parallelProcessing="true">
				<tokenize token="\n" />
				<setHeader headerName="docId">
					<simple>${id}</simple>
				</setHeader>
				<setHeader headerName="uri">
					<simple>/trades/${header.docId}.xml</simple>
				</setHeader>
				<setHeader headerName="CamelHttpMethod">
					<constant>PUT</constant>
				</setHeader>

				<convertBodyTo type="java.lang.String" />
				<to uri="metrics:timer:xquerrail.insert.counter?action=start" />
				<to
					uri="http4://{{mlHost}}:{{mlRestXquerrailPort}}/documents/insert.xml?authUsername={{mlUsername}}&amp;authPassword={{mlPassword}}&amp;authenticationPreemptive=true" />
				<to uri="metrics:timer:xquerrail.insert.counter?action=stop" />
			</split>
			<to uri="metrics:timer:xquerrail.counter?action=stop" />
			<log message="Done" />
		</route>

		<route id="xquerrail-initialize">
			<from uri="timer://runOnce?repeatCount=1&amp;delay=5000" />
			<setHeader headerName="XccUri">
				<simple>xcc://{{mlUsername}}:{{mlPassword}}@{{mlHost}}:{{mlXdbcXquerrailPort}}
				</simple>
			</setHeader>
			<to uri="bean:xquerrailInitializeProcessor" />
		</route>

		<route id="ml-xcc-xquerrail">
			<from uri="file://inbox/xcc-xquerrail" />
			<log message="Start" />
			<to uri="metrics:timer:xquerrail.xcc.counter?action=start" />
			<split streaming="true" parallelProcessing="true">
				<tokenize token="\n" />
				<setHeader headerName="docId">
					<simple>${id}</simple>
				</setHeader>
				<setHeader headerName="MlXccUri">
					<simple>/trades/${header.docId}.xml</simple>
				</setHeader>
				<setHeader headerName="XccUri">
					<simple>xcc://{{mlUsername}}:{{mlPassword}}@{{mlHost}}:{{mlXdbcXquerrailPort}}
					</simple>
				</setHeader>
				<convertBodyTo type="java.lang.String" />
				<to uri="metrics:timer:xquerrail.xcc.insert.counter?action=start" />
				<to uri="bean:xccModuleInvokeProcessor" />
				<to uri="metrics:timer:xquerrail.xcc.insert.counter?action=stop" />
			</split>
			<to uri="metrics:timer:xquerrail.xcc.counter?action=stop" />
			<log message="Done" />
		</route>


		<!-- This route shows how to use the Camel Timer component to initiate 
			a flow, which then involves the CurrentTimeXmlGenerator setting the input 
			message to a block of XML, which is then written to the inboxUri that the 
			above route reads from (using the ID of the current message as the file name), 
			which means each XML block will be ingested as a new document into MarkLogic. 
			See http://camel.apache.org/timer.html for more info on the timer, http://camel.apache.org/bean.html 
			for more info on a Bean endpoint, and http://camel.apache.org/file2.html 
			for more info on writing a file <route> <from uri="timer:sampleTime?fixedRate=true&amp;period=5000" 
			/> <to uri="bean:currentTimeXmlGenerator" /> <to uri="{{inboxUri}}?fileName=${id}.xml" 
			/> </route> -->

	</camelContext>

</beans>